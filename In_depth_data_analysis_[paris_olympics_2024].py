# -*- coding: utf-8 -*-
"""In-depth data Analyst [Paris Olympics 2024]

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/in-depth-data-analyst-paris-olympics-2024-cfadc191-ee0d-403d-9846-4afcd31f9546.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240812/auto/storage/goog4_request%26X-Goog-Date%3D20240812T185916Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D20b90e07573c79df9b472a87d8e5a3dfd869256eabe8032c6572ccb629dc2f5d93957cf49835ea8085ba98ff1ca6a7968d4d12c8b0a531123e85d415173c7922cb0b1cff55fbdde61f8a993d2106a1ec3f2af0e785cbd483350c66412a584d554d68e40969bbf341f4bcf59485544696738e0d63c7068f2f33a2ba72bbe77dc9e5bb0f2da636e9a0465caa45c64b565c26ac3e062ad3a98d6aa65d5cdec7c4286473764163b84dc625d6a6f23097589feee7676d62875bf251b24937cb6ce12d5ec4b0edac2e5b11a123e33c1b255531b002cdf0fca7890b1447cb15d39500f02ed0d79d03896a03d8d3bd8a84263d0a7374cb940f82fc5f53fbb348d3fc88ea
"""

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'paris-olympics-2024-games-dataset-updated-daily:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5525914%2F9148272%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240812%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240812T185916Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8b41b25b4cd4fb4527d474b89855df53cda2ff80ca49a08f74f30caa369a7f35d6edeb680e5d2016c6a46d8bf3ec93e19f9ae6adc0114e493aafd615d5f0ee118304d3dc3e5eddb43311a140b6876828fbdd2cce5224324c8e986eca703bf05d73a289d718ddb4651e50584738837610683248642253e0bf3d05ddec418666e5782b598a6c99c79207e50ee2c545d329eca621bd722654a4348b61fcba9dd8fecacdb9472a617156013e214b4255282083fd126d8aa8f78a01cda17b850b523dd2ffe46b9ced8e18e32256d6475ac9534f39580aecb3bfdce36b53f8415a02be88b0beaad29bed115603f51765c4e85ae75490bb3d0bd50460c0735053284c88'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# Load the datasets
athletes_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/results/Athletics.csv')
events_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/events.csv')
medallists_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/medallists.csv')
medals_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/medals.csv')
medals_total_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/medals_total.csv')
schedules_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/schedules.csv')
schedules_preliminary_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/schedules_preliminary.csv')
teams_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/teams.csv')
torch_route_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/torch_route.csv')
venues_df = pd.read_csv('/kaggle/input/paris-olympics-2024-games-dataset-updated-daily/venues.csv')

# In-Depth Report
athletes_summary = athletes_df.describe(include='all')
events_summary = events_df.describe(include='all')
medallists_summary = medallists_df.describe(include='all')
medals_summary = medals_df.describe(include='all')
medals_total_summary = medals_total_df.describe(include='all')
schedules_summary = schedules_df.describe(include='all')
schedules_preliminary_summary = schedules_preliminary_df.describe(include='all')
teams_summary = teams_df.describe(include='all')
torch_route_summary = torch_route_df.describe(include='all')
venues_summary = venues_df.describe(include='all')

# Analysis 1: Top Athletes by Medal Count
top_athletes = medallists_df['name'].value_counts().head(10)

# Analysis 2: Country-wise Athlete Performance
country_performance = medallists_df['country_code'].value_counts().head(10)

# Analysis 3: Discipline-wise Athlete Performance
discipline_performance = medallists_df['discipline'].value_counts().head(10)

# Medal distribution by gender
gender_success = medallists_df['gender'].value_counts()

# Most successful events
most_successful_events = medallists_df['event'].value_counts().head(10)

# Calculate the age of athletes at the time of the event
medallists_df['medal_date'] = pd.to_datetime(medallists_df['medal_date'])
medallists_df['birth_date'] = pd.to_datetime(medallists_df['birth_date'], errors='coerce')
medallists_df['age_at_event'] = medallists_df['medal_date'].dt.year - medallists_df['birth_date'].dt.year
medallists_df = medallists_df.dropna(subset=['age_at_event'])

# Define age groups
bins = [0, 18, 25, 30, 35, 40, 50, 100]
labels = ['<18', '18-25', '26-30', '31-35', '36-40', '41-50', '50+']
medallists_df['age_group'] = pd.cut(medallists_df['age_at_event'], bins=bins, labels=labels, right=False)

# Count medals by age group
age_group_success = medallists_df['age_group'].value_counts().sort_index()

# Identify countries with top athletes in each age group
top_age_group_athletes = medallists_df.groupby(['age_group', 'country_code'])['name'].count().unstack().fillna(0)
top_countries_by_age_group = top_age_group_athletes.idxmax(axis=1)

# 1. Medal Distribution by Gender
gender_success.plot(kind='bar', figsize=(8, 5), color=['skyblue', 'lightcoral'])
plt.title('Medal Distribution by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Medals')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# 2. Top 10 Most Successful Events
most_successful_events.plot(kind='bar', figsize=(10, 6), color='lightgreen')
plt.title('Top 10 Most Successful Events')
plt.xlabel('Event')
plt.ylabel('Number of Medals')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 3. Top 10 Countries by Medal Count
country_performance.plot(kind='bar', figsize=(10, 6), color='lightblue')
plt.title('Top 10 Countries by Medal Count')
plt.xlabel('Country')
plt.ylabel('Number of Medals')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 4. Medal Distribution by Age Group
age_group_success.plot(kind='bar', figsize=(10, 6), color='lightcoral')
plt.title('Medal Distribution by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Medals')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# 5. Top Countries by Age Group
top_countries_df = top_countries_by_age_group.reset_index()
top_countries_df.columns = ['Age Group', 'Top Country']

plt.figure(figsize=(10, 6))
plt.bar(top_countries_df['Age Group'], top_countries_df['Top Country'], color='lightblue')
plt.title('Top Countries by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Top Country')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

# Creating a PDF report to include all visual reports

from matplotlib.backends.backend_pdf import PdfPages

# Define the PDF file path
pdf_path = "/kaggle/working/athlete_performance_report.pdf"

# Create a PDF report
with PdfPages(pdf_path) as pdf:
    # 1. Medal Distribution by Gender
    gender_success.plot(kind='bar', figsize=(8, 5), color=['skyblue', 'lightcoral'])
    plt.title('Medal Distribution by Gender')
    plt.xlabel('Gender')
    plt.ylabel('Number of Medals')
    plt.xticks(rotation=0)
    plt.tight_layout()
    pdf.savefig()  # saves the current figure into a pdf page
    plt.close()

    # 2. Top 10 Most Successful Events
    most_successful_events.plot(kind='bar', figsize=(10, 6), color='lightgreen')
    plt.title('Top 10 Most Successful Events')
    plt.xlabel('Event')
    plt.ylabel('Number of Medals')
    plt.xticks(rotation=45)
    plt.tight_layout()
    pdf.savefig()
    plt.close()

    # 3. Top 10 Countries by Medal Count
    country_performance.plot(kind='bar', figsize=(10, 6), color='lightblue')
    plt.title('Top 10 Countries by Medal Count')
    plt.xlabel('Country')
    plt.ylabel('Number of Medals')
    plt.xticks(rotation=45)
    plt.tight_layout()
    pdf.savefig()
    plt.close()

    # 4. Medal Distribution by Age Group
    age_group_success.plot(kind='bar', figsize=(10, 6), color='lightcoral')
    plt.title('Medal Distribution by Age Group')
    plt.xlabel('Age Group')
    plt.ylabel('Number of Medals')
    plt.xticks(rotation=0)
    plt.tight_layout()
    pdf.savefig()
    plt.close()

    # 5. Top Countries by Age Group
    plt.figure(figsize=(10, 6))
    plt.bar(top_countries_df['Age Group'], top_countries_df['Top Country'], color='lightblue')
    plt.title('Top Countries by Age Group')
    plt.xlabel('Age Group')
    plt.ylabel('Top Country')
    plt.xticks(rotation=0)
    plt.tight_layout()
    pdf.savefig()
    plt.close()

# Provide the PDF file path to the user
pdf_path

